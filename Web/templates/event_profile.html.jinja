{% extends 'privileged_base.html.jinja' %}

{% block title %}
  <title>Event Profile of "{{profile['name']}}" - SPYDER - social proximity sensing</title>
{% endblock %}

{% block privileged_base_content %}
  {% if can_join_event %}
    <form style="margin:10px" align="right" action="/event/join/{{event_id}}" method="POST">
      <button type="submit" class="btn btn-primary">Join Event</button>
    </form>
  {% endif %}

  <div role="tabpanel" style="width: 100%">

    <!-- Nav tabs -->
    <ul class="nav nav-tabs" role="tablist">
      <li role="presentation"><a href="#profile" aria-controls="profile" role="tab" data-toggle="tab">Event Profile</a></li>
      <li role="presentation"><a href="#attendee-list" aria-controls="attendee-list" role="tab" data-toggle="tab">Attendees</a></li>
      <li role="presentation"><a href="#interaction" aria-controls="interaction" role="tab" data-toggle="tab">Interaction</a></li>
      <li role="presentation" class="active"><a href="#visualisation" aria-controls="visualisation" role="tab" data-toggle="tab">Visualisation</a></li>
      <li role="presentation"><a href="#chart" aria-controls="chart" role="tab" data-toggle="tab">Chart</a></li>
    </ul>

    <!-- Tab panes -->
    <div class="tab-content">

      <div role="tabpanel" class="tab-pane" id="profile">
        <dl class="dl-horizontal">
          <dt>Event name</dt>   <dd>{{profile['name']}}</dd>
          <dt>Start time</dt>   <dd id="start_time_string">{{profile['start_time']}}</dd>
          <dt>End time</dt>     <dd>{{profile['end_time']}}</dd>
          <dt>Organiser</dt>    <dd><a href="/user/profile/{{profile['organiser']}}">{{profile['organiser']}}</a></dd>
          <dt>Speaker</dt>      <dd><a href="/user/profile/{{profile['speaker']}}">{{profile['speaker']}}</a></dd>
        </dl>
      </div>

      <div role="tabpanel" class="tab-pane" id="attendee-list">
      {% if attendees['user_mappings'] %}
        <table class="table table-hover">
          <tr>
            <th>Photo</th>
            <th>Username</th>
            <th>Name</th>
          </tr>
          {% for record in attendees['user_mappings'] %}
            <tr class="clickable-row" href="/user/profile/{{ record['user_name'] }}">
              <td>
                <div class="profile-picture-container">
                  <p hidden>{{record['photo_url']}}</p>
                  <img width=40 height=40/>
                </div>
              </td>
              <td><a href="/user/profile/{{ record['user_name'] }}">{{record['user_name']}}</a></td>
              <td>{{record['name']}}</td>
            </tr>
          {% endfor %}
        </table>
      {% else %}
        <p>{{profile['name']}} hasn't had any attendees at the moment.</p>
      {% endif %}
      </div>

      <div role="tabpanel" class="tab-pane" id="interaction">
      {% if interaction['interaction'] %}
        <dl class="dl-horizontal">
          <dt>start_time</dt>   <dd>{{interaction['event_start_time']}}</dd>
          <dt>end_time</dt>     <dd>{{interaction['event_end_time']}}</dd>
        </dl>
        <table class="table table-hover">
          <tr>
            <th>user1</th>
            <th>user2</th>
            <th>start_time</th>
            <th>end_time</th>
          </tr>
          {% for record in interaction['interaction'] %}
            <tr>
              <td><a href="/user/profile/{{record['user1']}}">{{record['user1']}}</a></td>
              <td><a href="/user/profile/{{record['user2']}}">{{record['user2']}}</a></td>
              <td>{{record['start_time']}}</td>
              <td>{{record['end_time']}}</td>
            </tr>
          {% endfor %}
        </table>
      {% else %}
        <p>{{profile['name']}} hasn't had any interaction at the moment.</p>
      {% endif %}
      </div>

  <script type="text/javascript" src="/static/lib/d3.min.js" ></script>
  <script type="text/javascript" src="/static/lib/graph.js" ></script>
  <script type="text/javascript" src="/static/lib/get_interact_data.js" ></script>
  <script type="text/javascript" src="/static/lib/get_interact_data_sample.js" ></script>
  <script type="text/javascript" src="/static/lib/get_attendees.js" ></script>

  <script type="text/javascript">
    var shift_start_time; // : int, shift second since epoch to our program format
    var event_start_time = 0; // always = 0
    var event_end_time; // int
    var current_time; // int
    var last_avaliable_time; // int
    var cursor_time; // int
    var rem_play = 0; // for play_one_step

    var lock = false; // lock for update interactions and attendees
    var fetch_interval = 1000; // time (in millsecond) for refreshing

    var slider;
    var step_interval = 200; // time (in millsecond) for playing one step
    var interval_per_second = 1000 / step_interval;
    var step_frames = 1; // how many (second in event) change per step

    var is_playing = false;

    var graph; // d3 graph
    // list of (username : string), reflect node in graph
    var attendee_list;
    // set of {user_a : string, user_b : string}, reflect edge in graph
    // var graph_edges;
    // list of {time : int, user_a : string, user_b : string, is_add: bool}
    // ordered by time
    var tinteractl;

    function datetime_to_inttime_raw(datetime) {
      var d = new Date(datetime);
      // convert from millsecond to second
      return d.valueOf() / 1000;
    }

    function inttime_from_now() {
      var d = new Date();
      return Math.floor(d.valueOf() / 1000) - shift_start_time;
    }

    // convert datetime in java string format (or another format, fine new Date();)
    // to int in second format respect to shift_start_time
    function datetime_to_inttime(datetime) { // datetime : string
      var d = new Date(datetime);
      return d.valueOf() / 1000 - shift_start_time;
    }

    function inttime_to_datetime(time) {
      var d = new Date(1000 * (time + shift_start_time));
      return d.toLocaleString();
    }

    // sort on key values
    // function keysrt(key,desc) {
    //   return function(a,b){
    //    return desc ? ~~(a[key] < b[key]) : ~~(a[key] > b[key]);
    //   }
    // }

    function keysrt(key) {
      return function(a,b){
       if (a[key] > b[key]) return 1;
       if (a[key] < b[key]) return -1;
       return 0;
      }
    }

    function extract_interaction_list(interactions) {
      list = [];
      for (var i = 0; i < interactions.length; i++) {
        start_time = datetime_to_inttime(interactions[i]["start_time"]);
        end_time = datetime_to_inttime(interactions[i]["end_time"]);
        user_a = interactions[i]["user1"];
        user_b = interactions[i]["user2"];
        if (start_time >= end_time) {
          continue;
        }
        if (user_a > user_b) {
          var user_temp = user_a;
          user_a = user_b;
          user_b = user_temp;
        }
        list.push({
          "time": start_time,
          "user_a": user_a,
          "user_b": user_b,
          "is_add": true
        });
        list.push({
          "time": end_time,
          "user_a": user_a,
          "user_b": user_b,
          "is_add": false
        });
      }
      return list.sort(keysrt('time'));
    }

    function extract_attendee_list(attendees) {
      list = [];
      user_mappings_list = attendees["user_mappings"];
      for (var i = 0; i < user_mappings_list.length; i++) {
        list.push(user_mappings_list[i]["user_name"])
      }
      list.sort();
      return list;
    }

    function add_all_node() {
      for (var i = 0; i < attendee_list.length; i++) {
        graph.addNode(attendee_list[i]);
      }
    }

    function remove_all_node() {
      for (var i = 0; i < attendee_list.length; i++) {
        graph.removeNode(attendee_list[i]);
      }
    }

    function first_index_tinteractl(time) {
      for (var i=0; i<tinteractl.length; i++) {
        if (tinteractl[i]["time"] >= time) {
          return i;
        }
      }
      return null;
    }

    function update_graph(time) {
      if (lock) {
        return;
      }

      var edges;
      edges = {};
      for (var i = 0; i < attendee_list.length; i++) {
        edges[attendee_list[i]] = {}
        for (var j = 0; j <= i; j++) {
          edges[attendee_list[i]][attendee_list[j]] = false;
        }
      }
      for (var i = 0; i < tinteractl.length && tinteractl[i]["time"] < time; i++) {
        edges[tinteractl[i]["user_a"]][tinteractl[i]["user_b"]] = tinteractl[i]["is_add"];
      }

      cursor_time = time;
      for (user_a in edges) {
        for (user_b in edges[user_a]) {
          if(edges[user_a][user_b]) {
            graph.addLink(user_a, user_b);
          } else {
            graph.removeLink(user_a, user_b);
          }
        }
      }

      slider.setValue(cursor_time, false);
      $("#slider-val").text(inttime_to_datetime(cursor_time));
    }

    function speed_from_value(value) {
      if (value >= 0) {
        sign = 1;
      } else {
        sign = -1;
        value *= -1;
        value -= 1;
      }
      return sign * Math.pow(2, value);
    }

    function init_slider() {
      slider = new Slider("#slider", {
        formatter: function(value) {
          return inttime_to_datetime(value);
        },
        max: last_avaliable_time - 1,
        step: step_frames
      });
      slider.on("slide", function(slideEvt) {
        update_graph(slideEvt.value);
      });
      speeder = new Slider("#speed", {
        formatter: function(value) {
          return "x " + speed_from_value(value);
        }
      });
      speeder.on("slide", function(slideEvt) {
        step_frames = speed_from_value(slideEvt.value);
      });
    }

    function play_one_step() {
      current_time = inttime_from_now();
      // this is live event
      if (current_time < event_end_time) {
        last_avaliable_time = current_time;
      } else { // this is replay event
        last_avaliable_time = event_end_time;
      }
      slider.setAttribute("max", last_avaliable_time - 1);
      if (is_playing) {
        var mill_diff_time = step_frames * 1000 / interval_per_second + rem_play;
        if (mill_diff_time > 0) {
          rem_play = mill_diff_time % 1000;
          time = cursor_time + Math.floor(mill_diff_time / 1000);
          time = Math.min(time, last_avaliable_time - 1);
        } else {
          if (mill_diff_time % 1000 == 0) {
            rem_play = 0
          } else {
            rem_play = 1000 + (mill_diff_time % 1000)
          }
          time = cursor_time + Math.floor(mill_diff_time / 1000);
          time = Math.max(time, 0);
        }
        update_graph(time);
      }
    }

    function init(interactions, attendees) {
      graph = new myGraph("#graph");
      shift_start_time = datetime_to_inttime_raw(interactions["event_start_time"]);
      event_end_time = datetime_to_inttime(interactions["event_end_time"]);
      current_time = inttime_from_now();
      // this is live event
      if (current_time < event_end_time) {
        $(".live-label").show();
        last_avaliable_time = current_time;
        cursor_time = last_avaliable_time - 1;
        is_playing = true;
      } else { // this is replay event
        $(".live-label").hide();
        last_avaliable_time = event_end_time;
        cursor_time = 0;
      }

      tinteractl = extract_interaction_list(interactions["interaction"]);
      attendee_list = extract_attendee_list(attendees);

      // reset node
      remove_all_node();
      add_all_node();

      init_slider();

      stepInterval = setInterval(play_one_step, step_interval);
      
      if (current_time < event_end_time) {
        update_graph(current_time - 1);

        setInterval(function() {
          $.ajax({
            url: '/xhr/event_visualisation_data/{{event_id}}',
            success:function(result){
              interactions = result['interaction'];
              attendees = result['attendees'];
              lock = true;
              tinteractl = extract_interaction_list(interactions["interaction"]);
              new_attendee_list = extract_attendee_list(attendees);
              var i, j;
              for (var i=0,j=0; i < new_attendee_list.length; i++) {
                if (new_attendee_list[i] == attendee_list[j]) {
                  j ++;
                } else {
                  graph.addNode(new_attendee_list[i]);
                }
              }
              lock = false;

              d3.select('#chart').select("svg").remove();
              updateStatistics(interactions);

              if (current_time >= event_end_time + 2) {
                window.location.href = '/event/profile/{{event_id}}';
              }
            }
          });
        }, fetch_interval);
      } else {
        d3.select('#chart').select("svg").remove();
        updateStatistics(interactions);
        update_graph(0);
      }
    }

  function updateStatistics(interactionObject) {
    var   interactionData = interactionObject;
          interaction = interactionData.interaction;
          event_end = new Date(interactionData.event_end_time);
          interval = Math.floor(last_avaliable_time * 1000 / 7) ;
    var results,
          data = [],
          chart,
      temp_t,
          bars,
          margin = 100,
          w = 8,
          h = 500,
          x, y,
          xAxis, yAxis;
    temp_t = new Date(interactionData.event_start_time);
     
    while (temp_t.getTime() <= event_end.getTime()) {
      var count = 0;
      for (var i = 0; i < interaction.length; i++) {
        var interaction_start = new Date(interaction[i].start_time);
        var interaction_end = new Date(interaction[i].end_time);
        if ( (interaction_start.getTime() <= temp_t.getTime()+ interval)  && (interaction_end.getTime() >= temp_t.getTime()) ) {
          count++;
        }
      }
      result = {};
      result.time = temp_t.toLocaleTimeString(); 
      result.interaction= count;
      data.push( result );
      temp_t.setTime(temp_t.getTime() + interval);
    }
    
    var valueLabelWidth = 40; // space reserved for value labels (right)
    var barHeight = 20; // height of one bar
    var barLabelWidth = 100; // space reserved for bar labels
    var barLabelPadding = 5; // padding between bar and bar labels (left)
    var gridLabelHeight = 18; // space reserved for gridline labels
    var gridChartOffset = 3; // space between start of grid and first bar
    var maxBarWidth = 420; // width of the bar with the max value

    // accessor functions 
    var barLabel = function(d) { return d['time']; };
    var barValue = function(d) { return parseFloat(d['interaction']); };
   
    // scales
    var yScale = d3.scale.ordinal().domain(d3.range(0, data.length)).rangeBands([0, data.length * barHeight]);
    var y = function(d, i) { return yScale(i); };
    var yText = function(d, i) { return y(d, i) + yScale.rangeBand() / 2; };
    var x = d3.scale.linear().domain([0, d3.max(data, barValue)]).range([0, maxBarWidth]);
    // svg container element
    var chart = d3.select('#chart').append("svg")
      .attr('width', maxBarWidth + barLabelWidth + valueLabelWidth)
      .attr('height', gridLabelHeight + gridChartOffset + data.length * barHeight);
    // grid line labels
    var gridContainer = chart.append('g')
      .attr('transform', 'translate(' + barLabelWidth + ',' + gridLabelHeight + ')'); 
    gridContainer.selectAll("text").data(x.ticks(10)).enter().append("text")
      .attr("x", x)
      .attr("dy", -3)
      .attr("text-anchor", "middle")
      .text(String);
    // vertical grid lines
    gridContainer.selectAll("line").data(x.ticks(10)).enter().append("line")
      .attr("x1", x)
      .attr("x2", x)
      .attr("y1", 0)
      .attr("y2", yScale.rangeExtent()[1] + gridChartOffset)
      .style("stroke", "#ccc");
    // bar labels
    var labelsContainer = chart.append('g')
      .attr('transform', 'translate(' + (barLabelWidth - barLabelPadding) + ',' + (gridLabelHeight + gridChartOffset) + ')'); 
        labelsContainer.selectAll('text').data(data).enter().append('text')
      .attr('y', yText)
      .attr('stroke', 'none')
      .attr('fill', 'black')
      .attr("dy", ".35em") // vertical-align: middle
      .attr('text-anchor', 'end')
      .text(barLabel);
    // bars
    var barsContainer = chart.append('g')
      .attr('transform', 'translate(' + barLabelWidth + ',' + (gridLabelHeight + gridChartOffset) + ')'); 
        barsContainer.selectAll("rect").data(data).enter().append("rect")
      .attr('y', y)
      .attr('height', yScale.rangeBand())
      .attr('width', function(d) { return x(barValue(d)); })
      .attr('stroke', 'white')
      .attr('fill', 'steelblue');
    // bar value labels
    barsContainer.selectAll("text").data(data).enter().append("text")
      .attr("x", function(d) { return x(barValue(d)); })
      .attr("y", yText)
      .attr("dx", 3) // padding-left
      .attr("dy", ".35em") // vertical-align: middle
      .attr("text-anchor", "start") // text-align: right
      .attr("fill", "black")
      .attr("stroke", "none")
      .text(function(d) { return d3.round(barValue(d), 2); });
    // start line
    barsContainer.append("line")
      .attr("y1", -gridChartOffset)
      .attr("y2", yScale.rangeExtent()[1] + gridChartOffset)
      .style("stroke", "#000");
  }

  </script>


      <div role="tabpanel" class="tab-pane" id="chart">
                 <button type="text" class="live-label btn btn-success" style="margin-right:5px;">LIVE</button>
          <div style="margin: auto;">
            <div id="chart"></div>
          </div>
      </div>

      <div role="tabpanel" class="tab-pane active" id="visualisation" style="width: 100%">
            <div id="graph"></div>
            <div id="control-panel" class="container-fluid">
            <div class="row">
              <div class="col-md-10">
              <div id="slider-wrapper">
                <input id="slider"
                  type="text"
                  data-slider-id='silder-container' 
                  data-slider-min="0"
                  data-slider-max="?"
                  data-slider-step="?"
                  data-slider-value="0"
                  style="width: 100%;"/>
              </div>
              </div>
              <div class="col-md-2">
              <div id="slider-val-wrapper">
                  <span id="slider-val"></span>
              </div>
              </div>
            </div>
            <div class="row">
              <div class="col-md-1">
                 <button type="text" class="live-label btn btn-success" style="margin-right:5px;">LIVE</button>
              </div>
              <div class="col-md-1">
                <button type="button" class="btn btn-default"
                  onclick="is_playing = true;">Play</button>
              </div>
              <div class="col-md-1">
                <button type="button" class="btn btn-default" 
                  onclick="is_playing = false;">Pause</button>
              </div>
              <div class="col-md-1">
              </div>
              <div class="col-md-1">
                Speed:
              </div>
              <div class="col-md-6">
                <div id="speed-wrapper">
                  <input id="speed"
                    type="text"
                    data-slider-id='silder-container' 
                    data-slider-min="-16"
                    data-slider-max="15"
                    data-slider-step="1"
                    data-slider-value="0"
                    style="width: 100%;"/>
                </div>
              </div>
            </div>
            </div>
            <link rel="stylesheet" href="/static/node_modules/bootstrap-slider/dist/css/bootstrap-slider.min.css">
            <style type="text/css">
              .link { stroke: #000000; }
              .nodetext {
                pointer-events: none;
                font: 10px sans-serif;
              }
              #graph {
                width:100%;
                height:500px;
                border:3px solid black;
                border-radius:12px;
                margin:auto;
              }
              #slider-wrapper {
                width: 100%;
                margin-top: 30px;
                margin-bottom: 20px;
                margin-left:auto;
                margin-right:auto;
              }
              #slider-val-wrapper {
                width: 100%;
                margin-top: 30px;
                margin-bottom: 20px;
                margin-left:auto;
                margin-right:auto;
              }
            </style>
            <style>
              #silder-container .slider-selection {
                background: #BABABA;
              }
            </style>
            <!-- bootstrap-slider -->
            <script src="/static/node_modules/bootstrap-slider/js/bootstrap-slider.js"></script>

            <script>
              var countdown_interval;
              var start_ftime = (new Date($("#start_time_string").html())).valueOf();
              var cur_ftime = (new Date()).valueOf();
              if (start_ftime>=cur_ftime) {
                $("#graph").html(
                  '<div style="margin: 20px;">'
                  +'Sorry, this event has not started, yet. Came back in '
                  +'<span class="countdown-val">' + Math.floor((start_ftime - cur_ftime + 2000) / 1000) + '</span> seconds.</div>');
                $("#chart").html(
                  '<div style="margin: 20px;">'
                  +'Sorry, this event has not started, yet. Came back in '
                  +'<span class="countdown-val">' + Math.floor((start_ftime - cur_ftime + 2000) / 1000) + '</span> seconds.</div>');
                $('.live-label').hide();
                $('#control-panel').hide();
                countdown_interval = setInterval(function() {
                  cur_ftime = (new Date()).valueOf();
                  $(".countdown-val").html(Math.floor((start_ftime - cur_ftime + 2000) / 1000));
                }, 1000);
                setTimeout(start_visualisation, start_ftime - cur_ftime + 2000);
              } else {
                start_visualisation();
              }

              function start_visualisation() {
                clearInterval(countdown_interval);
                $("#graph").html("");
                $("#chart").html("");
                $('#control-panel').show();
                $('.live-label').show();
                $.ajax({
                  url: '/xhr/event_visualisation_data/{{event_id}}',
                  success:function(result){
                    init(result['interaction'], result['attendees']);
                  }
                });
              }
            </script>
      </div>

    </div>
{% endblock %}
